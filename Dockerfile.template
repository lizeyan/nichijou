FROM {% if gpu %}nvidia/cuda:10.1-cudnn7-devel-ubuntu18.04{% else %}ubuntu:18.04{% endif %}

# set apt and install apt packages
ENV PATH="/usr/local/cuda/bin:${PATH}"
ENV LD_LIBRARY_PATH="/usr/lib/x86_64-linux-gnu:/usr/local/nvidia/lib64:/usr/local/nvidia/lib:/usr/local/cuda/lib64:/usr/local/cuda/lib:${LD_LIBRARY_PATH}"
ENV TZ=Asia/Shanghai
ENV LANG=C.UTF-8
ENV LC_ALL=C.TUF-8
RUN echo '\
deb {{ ubuntu }} bionic main restricted universe multiverse\n\
deb {{ ubuntu }} bionic-updates main restricted universe multiverse\n\
deb {{ ubuntu }} bionic-backports main restricted universe multiverse\n\
deb {{ ubuntu }} bionic-security main restricted universe multiverse\n' > /etc/apt/sources.list

RUN cat /etc/apt/sources.list && echo ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone && \
    chsh -s /bin/bash && \
    DEBIAN_FRONTEND=noninteractive apt-get -y update && \
    DEBIAN_FRONTEND=noninteractive apt-get -y dist-upgrade && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        locales language-pack-en tzdata ca-certificates lsb-release iputils-ping \
        apt-utils apt-transport-https gnupg dirmngr openssl software-properties-common  \
        tar wget ssh git mercurial vim openssh-client psmisc rsync \
        build-essential autoconf libtool \
        libssl-dev zlib1g-dev libncurses5-dev libncursesw5-dev libreadline-dev libsqlite3-dev \
        libgdbm-dev libdb5.3-dev libbz2-dev libexpat1-dev liblzma-dev tk-dev \
        libnlopt-dev libpq-dev libffi-dev libcairo-dev libedit-dev \
        libcurl4-nss-dev libsasl2-dev libsasl2-modules libapr1-dev libsvn-dev \
        python-dev python-pip libjpeg-dev htop sudo zsh liblapack-dev libatlas-base-dev ssh zookeeper \
    && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

RUN wget -O /tmp/Python-{{ python_version }}.tgz {{ python }}/{{ python_version }}/Python-{{ python_version }}.tgz  && \
        cd /tmp && tar -xzvf Python-{{ python_version }}.tgz && \
        cd Python-{{ python_version }} && \
        ./configure --enable-optimizations && \
        make -j12 && \
        make altinstall && \
        rm /tmp/Python-{{ python_version }}.tgz && \
        rm -rf /tmp/Python-{{ python_version }} && \
    ln -sf /usr/local/bin/python{{ python_major_version }} /usr/bin/python && \
    ln -sf /usr/local/bin/pip{{ python_major_version }} /usr/bin/pip && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    python --version && \
    cd /root && pip config set global.index-url {{ pypi }}

RUN pip install --upgrade pip cython --no-cache-dir

RUN DEBIAN_FRONTEND=noninteractive apt-get -y update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        graphviz libgraphviz-dev nodejs npm curl && \
    pip install --no-cache-dir --upgrade torch torchvision pytorch-ignite \
                               matplotlib seaborn pandas scipy autopep8 jupyter \
                               jupyterlab numpy jupyter_nbextensions_configurator \
                               loguru numba bidict coverage click sklearn dill pathos \
                               joblib diskcache jupyterlab visdom\
                               networkx tqdm pygraphviz elasticsearch loguru pytest pipenv\
                               tensorflow{% if gpu %}-gpu{% else %}{% endif %} keras && \
    (pip uninstall -y pillow; CC="cc -mavx2" pip install -U --force-reinstall "pillow-simd==6.0.0.post0") && \
    cd /srv && git clone https://github.com/thu-ml/zhusuan.git && cd zhusuan && pip install . && \
    jupyter nbextensions_configurator enable --system && \
    apt-get autoremove -y && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

RUN jupyter labextension install --no-build @jupyterlab/toc && \
    jupyter labextension install --no-build @telamonian/theme-darcula && \
    jupyter labextension install --no-build jupyterlab_vim && \
    jupyter labextension install --no-build jupyterlab-spreadsheet && \
    jupyter labextension install --no-build @aquirdturtle/collapsible_headings && \
    jupyter lab build && \
    curl -Lo install.sh https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh && \
    sh install.sh


CMD ["/usr/bin/zsh"]
